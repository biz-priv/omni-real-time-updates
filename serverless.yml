service: omni-real-time-updates

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  versionFunctions: false
  tags: ${self:custom.tags}
  stackTags: ${self:custom.tags}
  iamRoleStatements: # default vpc lambda permissions
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
        - "ec2:AssignPrivateIpAddresses"
        - "ec2:UnassignPrivateIpAddresses"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:DescribeTable"
        - "dynamodb:Query"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "batch:Describe*"
        - "batch:List*"
        - "batch:SubmitJob"
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:ListBucket
      Resource:
        - ${ssm:/omni-wt-rt-updates/${self:provider.stage}/s3.omni_wr_rt_bucket_arn~true}
        - ${ssm:/omni-wt-rt-updates/${self:provider.stage}/s3.omni_wr_rt_bucket_arn~true}/*
    - Effect: "Allow"
      Action:
        - "sqs:GetQueueUrl"
        - "sqs:GetQueueAttributes"
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: "*"
  # timeout: 30
  runtime: nodejs14.x
  environment:
    REGION: ${self:custom.region}
  deploymentBucket:
    name: ${ssm:/omni-dw/${self:provider.stage}/sls/deployment/bucket}
    serverSideEncryption: AES256

custom:
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  tags:
    Application: OmniRealTimeReplication
    CreateBy: BizCloudExperts
    Environment: ${self:custom.stage}

plugins:
  - serverless-offline
  - serverless-provisioned-concurrency-autoscaling

package:
  individually: true

layers:
  OmniRealTimeReplicationLayer:
    path: lambdaLayer/lib
    name: ${self:service}-layer-${self:provider.stage}
    description: Omni Real Time Replication lambda layer for all node modules - ${self:provider.stage}
    compatibleRuntimes:
      - nodejs14.x
    retain: false

functions:
  #fullload
  shipmentHeaderTrigger: ${file(config/functions/fullLoad/shipmentHeaderTrigger.yml):function}

  #realtime
  aparFailuresRt: ${file(config/functions/realtime/aparFailuresRt.yml):function}
  consigneeRt: ${file(config/functions/realtime/consigneeRt.yml):function}
  referencesRt: ${file(config/functions/realtime/referencesRt.yml):function}
  shipmentAparRt: ${file(config/functions/realtime/shipmentAparRt.yml):function}
  shipmentHeaderRt: ${file(config/functions/realtime/shipmentHeaderRt.yml):function}
  shipmentMilestoneRt: ${file(config/functions/realtime/shipmentMilestoneRt.yml):function}
  shipperRt: ${file(config/functions/realtime/shipperRt.yml):function}

  #dynamoStreamToSns
  aparFailureStreamToSns: ${file(config/functions/dynamoStreamToSns/aparFailureStreamToSns.yml):function}
  consigneeStreamToSns: ${file(config/functions/dynamoStreamToSns/consigneeStreamToSns.yml):function}
  referencesStreamToSns: ${file(config/functions/dynamoStreamToSns/referencesStreamToSns.yml):function}
  shipmentAparStreamToSns: ${file(config/functions/dynamoStreamToSns/shipmentAparStreamToSns.yml):function}
  shipmentHeaderStreamToSns: ${file(config/functions/dynamoStreamToSns/shipmentHeaderStreamToSns.yml):function}
  shipmentMilestoneStreamToSns: ${file(config/functions/dynamoStreamToSns/shipmentMilestoneStreamToSns.yml):function}
  # shipperStreamToSns: ${file(config/functions/dynamoStreamToSns/shipperStreamToSns.yml):function}

resources:
  Resources:
    # shipment header full load batch
    OmniRtBatchServiceRole: ${file(config/batch/omniRt/computeEnvironment.yml):OmniRtBatchServiceRole}
    OmniRtComputeEnvironment: ${file(config/batch/omniRt/computeEnvironment.yml):OmniRtComputeEnvironment}
    ShipmentHeaderJobQueue: ${file(config/batch/omniRt/shipmentHeaderJobQueue.yml):ShipmentHeaderJobQueue}
    OmniRtBatchTaskExecutionRole: ${file(config/batch/omniRt/shipmentHeaderJob.yml):OmniRtBatchTaskExecutionRole}
    ShipmentHeaderJobDefinition: ${file(config/batch/omniRt/shipmentHeaderJob.yml):ShipmentHeaderJobDefinition}
    ShipmentHeaderBatchLogGroup: ${file(config/batch/omniRt/shipmentHeaderJob.yml):ShipmentHeaderBatchLogGroup}

    #toyota queue
    ToyotaTargetDLQ: ${file(config/queues/toyota/toyotaTargetQueue.yml):ToyotaTargetDLQ}
    ToyotaTargetQueue: ${file(config/queues/toyota/toyotaTargetQueue.yml):ToyotaTargetQueue}
    ToyotaTargetQueuePolicy: ${file(config/queues/toyota/toyotaTargetQueue.yml):ToyotaTargetQueuePolicy}

    #sns
    AparFailureTopic: ${file(config/sns/aparFailureSns.yml):AparFailureTopic}
    ToyotaAparFailureSubscription: ${file(config/sns/aparFailureSns.yml):ToyotaAparFailureSubscription}

    ConsigneeTopic: ${file(config/sns/consigneeSns.yml):ConsigneeTopic}
    ToyotaConsigneeSubscription: ${file(config/sns/consigneeSns.yml):ToyotaConsigneeSubscription}

    ReferencesTopic: ${file(config/sns/referencesSns.yml):ReferencesTopic}
    ToyotaReferencesSubscription: ${file(config/sns/referencesSns.yml):ToyotaReferencesSubscription}

    ShipmentAparTopic: ${file(config/sns/shipmentAparSns.yml):ShipmentAparTopic}
    ToyotaShipmentAparSubscription: ${file(config/sns/shipmentAparSns.yml):ToyotaShipmentAparSubscription}

    ShipmentHeaderTopic: ${file(config/sns/shipmentHeaderSns.yml):ShipmentHeaderTopic}
    ToyotaShipmentHeaderSubscription: ${file(config/sns/shipmentHeaderSns.yml):ToyotaShipmentHeaderSubscription}

    ShipmentMilestoneTopic: ${file(config/sns/shipmentMilestoneSns.yml):ShipmentMilestoneTopic}
    ToyotaShipmentMilestoneSubscription: ${file(config/sns/shipmentMilestoneSns.yml):ToyotaShipmentMilestoneSubscription}

    ShipperTopic: ${file(config/sns/shipperSns.yml):ShipperTopic}
    ToyotaShipperSubscription: ${file(config/sns/shipperSns.yml):ToyotaShipperSubscription}
